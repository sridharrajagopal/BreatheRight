/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 10.07.2021 01:41:47

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 8512;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_AVERAGE_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.043724793940782547, } };
const TfArray<1, int> quant0_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 260, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[10] = { -410, -449, -674, -440, -118, -420, -508, -520, -332, -836, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<10, float> quant2_scale = { 10, { 8.2886464952025563e-05, 9.011950169224292e-05, 8.1203812442254275e-05, 8.228463411796838e-05, 0.00010059538908535615, 7.9687597462907434e-05, 7.9211036791093647e-05, 7.9580553574487567e-05, 8.1722108006943017e-05, 5.6629185564815998e-05, } };
const TfArray<10, int> quant2_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[5] = { 980, -2016, -240, -1334, -261, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<5, float> quant3_scale = { 5, { 4.1583862184779719e-05, 2.3190845240605995e-05, 2.8530408599181101e-05, 2.1272062440402806e-05, 2.9419792554108426e-05, } };
const TfArray<5, int> quant3_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { 4231, -4231, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 3.0000537662999704e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(8) int8_t tensor_data6[2*260] = { 
  -26, -86, -34, -83, -25, 17, 21, 10, -13, -19, 33, 16, -71, -2, -41, 6, -3, 43, 9, -94, 32, 59, -38, 3, -76, -62, 48, -82, 54, 8, 43, 53, 27, 38, -98, 0, 2, -82, 52, 1, -46, 8, -7, 11, -74, -85, 59, -3, -1, -109, 103, 1, 71, 36, -70, 44, 40, -67, 31, -1, 25, -50, 12, 37, -18, -34, -4, -90, 41, -86, 23, 55, -48, -82, -106, 95, -28, 56, -31, -88, -37, 2, 24, -43, -89, -62, 23, -100, -15, -60, -51, -51, -109, -1, -71, 114, 30, 25, 45, -85, 11, -77, 70, -49, -26, -46, -10, 24, -49, -32, -38, -45, 41, -14, -102, 84, -70, -72, -43, -86, 17, -50, -23, 41, -33, 6, 56, 44, 3, -96, 39, 15, 39, -19, 14, 77, 46, -26, 52, -5, 42, 21, -13, 24, -110, -24, 45, 29, -13, -42, -21, 17, 3, -41, -28, 97, -23, 5, 58, -86, -6, -14, 8, 11, -44, -33, -76, 49, -79, -74, 16, -19, -61, 30, 24, -14, 21, 44, -41, -3, -46, -34, 57, -36, -89, 59, -38, 3, -78, -54, 48, 23, -89, -54, -103, 7, 36, 54, 29, -21, 42, -40, -40, -4, -79, 19, -71, -4, 59, -107, 86, 27, -86, -27, -54, 105, -74, -14, -5, -104, -26, 35, 19, 57, 25, -53, 37, -6, 54, 5, 28, -24, 11, 59, -107, -12, -21, -49, 28, -4, 3, -32, -15, 9, -27, 18, -42, -65, -84, 21, 24, -51, -38, 16, -12, 48, 45, -72, 23, 11, 
  48, -57, 21, 78, 90, -27, 48, 35, 31, 45, -29, 6, 67, 6, 14, -86, 57, -94, 79, 105, -69, -36, -6, -27, -30, 19, 86, 33, -39, 27, -17, 38, -36, -22, 110, -63, 4, 0, 1, -28, -36, 51, 38, 88, 29, 11, -4, 40, 57, 115, -56, 64, -66, -38, 43, 27, 5, -33, 52, -6, -22, -62, -4, 9, -24, 75, -23, -56, -53, 20, 36, 1, 40, -35, 47, -88, -11, -20, -32, 57, -28, 26, 61, -18, 41, 16, 73, 61, -54, -41, 41, -54, 79, 33, 85, -109, 15, 62, 78, 100, -18, 73, 35, 43, 97, 68, 6, -9, -45, -3, 61, 46, -9, -37, 115, -96, 17, -44, 44, 127, 47, 57, 45, 25, 3, -48, -20, -52, -13, 92, -15, 64, 3, -20, -21, -33, 71, 25, 29, 50, -47, 61, 16, -25, 124, -48, 14, 76, 80, 12, 16, -59, 81, 73, 108, -72, 69, -34, -4, -25, 1, 71, 84, 40, 85, 11, 72, 37, -46, -20, 66, -23, -56, 20, 97, -52, 48, 25, 47, 62, -69, -2, 22, 43, -44, 44, 46, 48, 61, 81, -94, -23, 90, 59, 40, -83, 69, -96, -12, -6, 60, -12, 63, 52, 116, -13, 80, 67, 45, 52, -13, -49, 54, -46, 65, -87, -48, 51, -30, 60, 65, -57, -71, -56, 21, 45, 22, 73, 75, 90, -5, -27, 2, 35, 94, -35, 41, -67, 60, 80, -72, 54, 57, 78, -39, -11, -50, 59, 81, 79, 11, -27, 48, -3, 39, -84, 77, 93, 83, 35, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,260 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0019918172620236874, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[10*5*5*1] = { 
  /* [0][0][][] */ -31, -59, -17, -82, -93, 
  /* [0][1][][] */ -37, 68, 18, 84, 127, 
  /* [0][2][][] */ 43, -39, -47, -26, -113, 
  /* [0][3][][] */ -60, -75, 31, 0, 105, 
  /* [0][4][][] */ 108, 82, 9, 37, 13, 
  /* [1][0][][] */ 7, 80, 48, 22, -15, 
  /* [1][1][][] */ -78, -107, -81, -48, -9, 
  /* [1][2][][] */ 75, 127, 57, -6, 27, 
  /* [1][3][][] */ -13, -37, 49, 40, 74, 
  /* [1][4][][] */ 19, -16, -75, -6, -67, 
  /* [2][0][][] */ -62, 84, -127, 120, -73, 
  /* [2][1][][] */ -47, 96, -117, 90, -49, 
  /* [2][2][][] */ -22, 70, -100, 104, -59, 
  /* [2][3][][] */ -32, 53, -54, 50, -31, 
  /* [2][4][][] */ -42, 34, -29, 42, -20, 
  /* [3][0][][] */ -77, -26, -62, -40, -69, 
  /* [3][1][][] */ -25, 69, 127, 40, 71, 
  /* [3][2][][] */ 0, -90, -119, -22, -44, 
  /* [3][3][][] */ -21, 4, 82, 57, 84, 
  /* [3][4][][] */ 69, 95, -33, 32, 20, 
  /* [4][0][][] */ 77, -80, 43, -24, -56, 
  /* [4][1][][] */ 98, -55, -8, 15, -96, 
  /* [4][2][][] */ 111, -69, -46, 45, -127, 
  /* [4][3][][] */ 94, -42, -19, 44, -113, 
  /* [4][4][][] */ 72, -43, 26, 12, -102, 
  /* [5][0][][] */ -46, 35, -61, 57, -17, 
  /* [5][1][][] */ -69, 56, -52, 25, 69, 
  /* [5][2][][] */ -90, 43, -21, -37, 115, 
  /* [5][3][][] */ -83, 33, -2, -87, 127, 
  /* [5][4][][] */ -43, -12, 19, -63, 100, 
  /* [6][0][][] */ -88, -19, 78, 112, 34, 
  /* [6][1][][] */ 89, 11, -88, -92, 7, 
  /* [6][2][][] */ 14, 23, 24, -44, -48, 
  /* [6][3][][] */ -36, 11, 63, 127, 107, 
  /* [6][4][][] */ -71, -23, -54, -81, -75, 
  /* [7][0][][] */ 33, 39, 97, 51, -33, 
  /* [7][1][][] */ -111, -63, -121, -46, 127, 
  /* [7][2][][] */ 113, 33, 62, 39, -99, 
  /* [7][3][][] */ 13, 52, 22, -33, 75, 
  /* [7][4][][] */ 10, -30, -31, 41, -7, 
  /* [8][0][][] */ -50, -21, -22, -57, -1, 
  /* [8][1][][] */ 36, -38, 106, 127, 99, 
  /* [8][2][][] */ 104, 87, -59, -7, 15, 
  /* [8][3][][] */ 5, 32, -70, -70, -37, 
  /* [8][4][][] */ -58, -84, 74, 31, 50, 
  /* [9][0][][] */ -86, -75, -27, 126, 45, 
  /* [9][1][][] */ 127, 105, 43, -97, 37, 
  /* [9][2][][] */ -16, -104, -111, 19, 31, 
  /* [9][3][][] */ -56, 85, 124, 48, 83, 
  /* [9][4][][] */ 82, -54, -46, 34, -48, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 10,5,5,1 } };
const TfArray<10, float> quant7_scale = { 10, { 0.0018956399289891124, 0.0020610617939382792, 0.0018571570981293917, 0.0018818757962435484, 0.0023006487172096968, 0.0018224808154627681, 0.0018115817802026868, 0.0018200326012447476, 0.0018690107390284538, 0.0012951275566592813, } };
const TfArray<10, int> quant7_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[5*5*5*10] = { 
  /* [0][0][][] */ -5,47,75,56,73,32,38,26,67,-5, -13,-5,50,19,42,43,-23,68,-40,-9, -7,-61,-12,47,102,-30,54,37,-12,-19, -30,30,-127,-88,-4,-63,-20,-88,-38,-4, 13,26,-61,-3,-59,-38,3,-30,-61,-59, 
  /* [0][1][][] */ -36,4,122,-48,27,0,-15,-12,13,-27, -9,59,44,61,50,92,-7,-10,74,18, 32,51,64,31,29,42,60,57,26,8, -23,20,-1,2,-66,-35,57,47,-37,-2, 13,33,10,17,-26,31,-45,-21,-40,2, 
  /* [0][2][][] */ -33,-46,69,6,92,22,8,59,-3,74, -20,51,47,-14,25,29,51,9,-7,30, 36,48,-24,11,-39,-31,-41,-28,-23,-21, -42,-6,-68,-12,30,-62,-43,1,42,58, 28,-16,-21,8,-25,-12,-59,48,-21,-47, 
  /* [0][3][][] */ 37,-9,63,9,57,86,-6,7,22,-40, -36,-6,8,11,28,54,57,-32,-49,4, 57,-48,-6,-38,-7,2,53,6,34,26, 11,-23,16,28,0,-56,-12,3,-21,2, -31,7,-3,20,-103,3,-27,-8,-49,41, 
  /* [0][4][][] */ -38,22,43,-5,17,31,39,-35,13,13, 12,-11,92,-46,69,-3,6,-6,-40,23, -22,-29,24,-19,19,30,-30,53,-26,-37, -60,1,19,-67,-70,-56,-8,27,64,-38, 0,-39,25,-36,-33,-44,-33,-40,-5,-28, 
  /* [1][0][][] */ -84,34,-9,-53,-69,-14,4,46,-9,24, -18,-64,34,-19,-71,21,-69,8,-95,50, -16,-65,-108,18,-47,-127,-65,-36,-108,-29, -102,-35,-68,12,32,-55,15,18,-112,-69, -9,49,72,3,-39,-103,48,62,-40,-117, 
  /* [1][1][][] */ 74,16,-38,-26,40,-96,-28,49,19,19, -84,-95,-18,-73,29,37,49,49,-35,-56, 2,-63,2,-34,-67,3,-74,26,3,-103, -113,-16,-8,-87,20,27,-11,-27,58,-80, 54,21,-13,57,40,50,-5,-16,-29,59, 
  /* [1][2][][] */ 65,2,-47,-90,-22,-101,54,-69,9,-82, 65,39,-27,27,-9,-61,3,-32,-66,30, 48,-29,-12,-70,-70,-20,-50,6,-61,-100, 10,38,62,33,-89,-60,-50,-109,-1,26, -93,14,52,11,-93,20,1,9,58,-40, 
  /* [1][3][][] */ 58,-48,22,-33,-124,-27,2,19,44,-89, 36,-11,-49,55,53,57,-20,-118,-68,-42, 29,-107,-2,11,-109,-67,-78,60,-119,9, -38,12,50,-20,-59,53,40,-4,-73,12, 48,12,-13,-104,-74,-80,38,-20,-24,-45, 
  /* [1][4][][] */ 24,-95,-47,-93,-107,-4,6,-70,-2,-7, -20,-103,21,58,-86,-38,-120,-56,-51,-95, 15,-78,-28,-100,43,-34,62,59,-16,-99, 53,-118,-35,-64,-108,-85,-78,-88,55,-23, -69,-81,-113,-52,13,-74,52,-57,29,-71, 
  /* [2][0][][] */ -49,-12,4,67,-65,-72,7,-36,68,-1, -26,8,2,-48,-106,-121,91,92,79,60, -66,56,-40,48,-57,-48,-40,3,49,-12, -52,-6,-85,-56,20,-20,-26,-8,23,48, 52,84,-104,20,-57,21,86,-41,87,-47, 
  /* [2][1][][] */ 59,74,-73,68,-101,-26,22,2,54,96, 53,22,-108,49,-64,-21,7,26,-41,-40, 59,-28,53,-43,6,-7,21,27,-28,70, 50,13,-23,-8,-61,-76,88,31,63,-44, -26,57,-39,-9,-127,-44,31,35,1,43, 
  /* [2][2][][] */ -26,60,-1,31,16,1,-24,69,82,105, 41,67,-46,74,-107,-9,33,18,-29,21, -33,53,-115,48,-11,4,77,57,55,55, 92,-17,-54,-20,-122,-40,52,24,58,14, 90,22,-98,11,-20,-29,-15,78,19,53, 
  /* [2][3][][] */ 19,87,105,33,1,-13,82,-51,54,51, 81,117,60,86,-6,48,47,7,58,43, 15,95,-100,-53,-7,38,45,63,65,11, 61,-19,-30,93,-105,6,-32,-44,56,77, -28,34,3,-18,-96,-68,113,10,-56,92, 
  /* [2][4][][] */ -2,-39,101,95,37,-60,-6,-64,103,57, 62,47,-71,81,-18,45,-41,36,75,62, 99,120,-94,74,-18,-53,-30,39,60,-8, -25,-2,-16,111,-47,4,31,-33,35,11, 31,-11,15,68,-23,-16,-8,-34,16,41, 
  /* [3][0][][] */ -89,-92,-40,47,-87,-16,-102,20,-35,66, 20,-26,42,33,52,-118,62,-49,-96,-96, 51,20,12,56,-18,65,-90,78,-47,-41, 76,28,4,-95,10,69,0,-22,-89,-17, -78,-111,59,16,57,12,72,-22,-13,46, 
  /* [3][1][][] */ -99,-52,-116,-17,62,55,2,58,19,-34, 18,67,-8,-94,-65,-40,-33,-2,-1,35, -94,-34,58,-17,44,-63,10,-51,-92,-109, -107,-101,-34,84,-87,-8,54,-105,33,-21, -123,-85,-83,-32,-6,-71,-34,-7,74,-84, 
  /* [3][2][][] */ -60,1,-76,78,-81,-10,-37,-127,17,-20, -10,22,-2,-30,-112,14,5,-3,-35,-14, -21,-75,-74,-127,6,-47,-20,53,-54,-60, 82,-34,-115,-14,87,-34,-56,19,11,-99, -79,-109,38,-71,-22,-31,-28,-104,-7,-105, 
  /* [3][3][][] */ 73,-107,3,-10,-86,-46,-104,-61,-17,3, 35,-89,-34,-70,-1,-9,-109,33,40,-103, 66,-9,-27,-105,19,-39,-119,-8,-14,21, -107,-37,46,61,-23,-77,-4,50,80,30, -92,-49,-75,-95,62,60,-58,-60,-91,-52, 
  /* [3][4][][] */ -84,-99,-32,-56,-62,-48,60,37,15,-31, -9,43,76,-52,26,12,27,-70,0,-96, -53,-45,20,-4,48,-74,-33,52,10,-48, -30,-122,55,39,-79,-89,-123,-92,44,16, 76,-101,77,74,-57,-74,72,-73,-60,-89, 
  /* [4][0][][] */ 32,4,-30,49,-79,-24,-14,95,-37,0, 75,69,-71,66,-57,-60,7,91,100,17, 20,10,-122,41,-127,-92,68,5,14,-18, 30,43,-33,91,-118,27,94,2,43,101, 66,56,29,22,-29,-80,94,95,96,0, 
  /* [4][1][][] */ -9,27,-25,2,-101,-90,66,54,30,-19, 84,26,-101,-28,-94,2,33,77,-11,73, 64,-7,-39,54,-77,-5,90,-26,57,43, 54,71,-43,9,-101,2,98,59,46,78, -47,42,-72,-10,-77,-74,-46,12,66,101, 
  /* [4][2][][] */ 73,69,19,11,-17,24,28,10,98,56, 2,10,-76,50,-92,-44,71,19,-2,2, 54,-11,34,57,-120,-72,34,103,4,26, 58,23,9,-36,-1,-78,-38,22,16,-3, 73,7,-11,9,-44,-13,-45,28,64,98, 
  /* [4][3][][] */ 78,-17,9,95,-61,-85,37,-25,-5,34, 40,53,-36,89,0,-48,70,75,23,46, 72,58,-24,-53,-40,-101,36,94,76,-34, -17,64,-31,28,-85,-58,-26,31,35,1, 9,9,-88,86,8,-68,-19,28,18,15, 
  /* [4][4][][] */ -21,65,-4,1,-119,-80,69,78,74,-24, 31,69,-83,69,-92,-94,74,90,80,85, 44,87,-94,69,-64,-19,34,98,-3,68, -11,16,37,68,4,-13,87,49,68,38, -33,-31,3,-5,-78,0,73,-37,52,102, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 5,5,5,10 } };
const TfArray<5, float> quant8_scale = { 5, { 0.0023752979468554258, 0.0013246765593066812, 0.0016296759713441133, 0.0012150743277743459, 0.001680478104390204, } };
const TfArray<5, int> quant8_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.043724793940782547, } };
const TfArray<1, int> quant9_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,50,13,10 } };
const TfArray<1, float> quant10_scale = { 1, { 0.017506798729300499, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,10 } };
const TfArray<1, float> quant11_scale = { 1, { 0.017506798729300499, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,5 } };
const TfArray<1, float> quant12_scale = { 1, { 0.015061892569065094, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,5 } };
const TfArray<1, float> quant13_scale = { 1, { 0.015061892569065094, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,260 } };
const TfArray<1, float> quant14_scale = { 1, { 0.015061892569065094, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.057336620986461639, } };
const TfArray<1, int> quant15_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,2 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,5 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,7,2 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,8,3 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,1 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,6,4 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6512, (TfLiteIntArray*)&tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 6500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6512, (TfLiteIntArray*)&tensor_dimension11, 1750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 875, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 880, (TfLiteIntArray*)&tensor_dimension13, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 272, (TfLiteIntArray*)&tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_AVERAGE_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_AVERAGE_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_AVERAGE_POOL_2D] = *tflite::ops::micro::Register_AVERAGE_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
